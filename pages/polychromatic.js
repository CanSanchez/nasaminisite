import { useEffect, useState } from "react";
import axios from "axios";
import Image from "next/image";
import { setRevalidateHeaders } from "next/dist/server/send-payload";
import styles from '@/styles/Polychromatic.module.css'
import Link from "next/link";
import Head from "next/head";

export default function Polychromatic() {

    const [image, setImage] = useState([]);
    const [images, setImages] = useState([]);

    const [time, setTime] = useState('Loading');
    const [date, setDate] = useState('');
    const [coords, setCoords] = useState({});

    const [loading, setLoading] = useState(true);

    const apiKey = "JAiRYKIdDYGt3tZEz9eDacoIs3qMgdq2bJWLEuP3";
    const url = `https://epic.gsfc.nasa.gov/api/natural?api_key=${apiKey}`;

    const getPolychromaticData = async () => {
        const response = await axios.get(url);
        const info = response.data;
        console.log(info);
        
        const caption = info[0].caption;
        const date = info[0].date.split(' ')[0];

        const date_formatted = date.replaceAll('-', '/');
        
        let times = [];
        let images = [];

        for(let i = 0; i < info.length; i++) {
            let time = info[i].date.split(' ')[1];
            let coords = info[i].centroid_coordinates;
            let imagePath = info[i].image;
            let image = `https://epic.gsfc.nasa.gov/archive/natural/${date_formatted}/png/${imagePath}.png`;

            times.push(time);
            images.push({
                image: image,
                time: time, 
                coords: coords
            });
        }
        
        setDate(date);
        setImages(images);
        setImage(images[0].image);
        setTime(times[0]);
        console.log(time)
        setCoords([images[0].coords.lat, images[0].coords.lon]);

        console.log(image);
    }

    const nextImage = () => {
        setLoading(true);
        let index = images.findIndex((img) => img.time === time);
        if(index === images.length - 1) {
            index = 0;
        } else {
            index++;
        }
        setImage(images[index].image);
        setTime(images[index].time);
        setCoords([images[index].coords.lat, images[index].coords.lon]);
        setTimeout(() => {
        setLoading(false);
        }, 3000);
    }

    const previousImage = () => {
        setLoading(true);
        let index = images.findIndex((img) => img.time === time);
        console.log(index);
        if(index === 0) {
            index = images.length - 1;
        } if(index < 0) {
            index++;
        } 
        else {
            index--;
        }
        setImage(images[index].image);
        setTime(images[index].time);
        setCoords([images[index].coords.lat, images[index].coords.lon]);
        setTimeout(() => {
            setLoading(false);
        }, 3000);
    }
    


    useEffect(() => {
        getPolychromaticData();
        setTimeout(() => {
            setLoading(false);
        }
        , 3000);
    }, [])

    
    return (
        <>
        <Head>
            <title>Can's NASA Project</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/nasalogo.png" />
        </Head>
        <main className={styles.main}>
            <h1>Polychromatic Earth</h1>
            <div>
                <div className={styles.infocontainer}>
                    <p>Time: {time}</p>
                    <p>Date: {date}</p>
                    <p>Coordinates: {coords[0]}, {coords[1]}</p>
                </div>
                {loading && <p className={styles.loading}>Loading...</p>}
                <div className={styles.container}>
                    <Image src='/left.png' onClick={nextImage} width={40} height={40} className={styles.arrows}/>
                    <Image id={styles.earth} src={image} alt={image} width={500} height={500} />
                    <Image src='/right.png' onClick={previousImage} width={40} height={40} className={styles.arrows}/>
                </div>
            </div>
            <Link href='/' className={styles.link}>Back to APOD</Link>
        </main>
        </>
    )
}